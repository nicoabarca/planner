"""
This type stub file was generated by pyright.
"""

"""Lukes Algorithm for exact optimal weighted tree partitioning."""
__all__ = ["lukes_partitioning"]
D_EDGE_W = ...
D_EDGE_VALUE = ...
D_NODE_W = ...
D_NODE_VALUE = ...
PKEY = ...
CLUSTER_EVAL_CACHE_SIZE = ...
def lukes_partitioning(G, max_size, node_weight=..., edge_weight=...):
    """Optimal partitioning of a weighted tree using the Lukes algorithm.

    This algorithm partitions a connected, acyclic graph featuring integer
    node weights and float edge weights. The resulting clusters are such
    that the total weight of the nodes in each cluster does not exceed
    max_size and that the weight of the edges that are cut by the partition
    is minimum. The algorithm is based on LUKES[1].

    Parameters
    ----------
    G : graph

    max_size : int
        Maximum weight a partition can have in terms of sum of
        node_weight for all nodes in the partition

    edge_weight : key
        Edge data key to use as weight. If None, the weights are all
        set to one.

    node_weight : key
        Node data key to use as weight. If None, the weights are all
        set to one. The data must be int.

    Returns
    -------
    partition : list
        A list of sets of nodes representing the clusters of the
        partition.

    Raises
    ------
    NotATree
        If G is not a tree.
    TypeError
        If any of the values of node_weight is not int.

    References
    ----------
    .. Lukes, J. A. (1974).
       "Efficient Algorithm for the Partitioning of Trees."
       IBM Journal of Research and Development, 18(3), 217â€“224.

    """
    ...

