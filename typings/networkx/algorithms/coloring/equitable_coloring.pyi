"""
This type stub file was generated by pyright.
"""

"""
Equitable coloring of graphs with bounded degree.
"""
__all__ = ["equitable_color"]
def is_coloring(G, coloring): # -> bool:
    """Determine if the coloring is a valid coloring for the graph G."""
    ...

def is_equitable(G, coloring, num_colors=...): # -> bool:
    """Determines if the coloring is valid and equitable for the graph G."""
    ...

def make_C_from_F(F): # -> defaultdict[Unknown, list[Any]]:
    ...

def make_N_from_L_C(L, C): # -> dict[tuple[Unknown, Unknown], int]:
    ...

def make_H_from_C_N(C, N): # -> dict[tuple[Unknown, Unknown], int]:
    ...

def change_color(u, X, Y, N, H, F, C, L): # -> None:
    """Change the color of 'u' from X to Y and update N, H, F, C."""
    ...

def move_witnesses(src_color, dst_color, N, H, F, C, T_cal, L): # -> None:
    """Move witness along a path from src_color to dst_color."""
    ...

def pad_graph(G, num_colors):
    """Add a disconnected complete clique K_p such that the number of nodes in
    the graph becomes a multiple of `num_colors`.

    Assumes that the graph's nodes are labelled using integers.

    Returns the number of nodes with each color.
    """
    ...

def procedure_P(V_minus, V_plus, N, H, F, C, L, excluded_colors=...):
    """Procedure P as described in the paper."""
    ...

def equitable_color(G, num_colors): # -> dict[Unknown, Unknown]:
    """Provides equitable (r + 1)-coloring for nodes of G in O(r * n^2) time
    if deg(G) <= r. The algorithm is described in [1]_.

    Attempts to color a graph using r colors, where no neighbors of a node
    can have same color as the node itself and the number of nodes with each
    color differ by at most 1.

    Parameters
    ----------
    G : networkX graph
       The nodes of this graph will be colored.

    num_colors : number of colors to use
       This number must be at least one more than the maximum degree of nodes
       in the graph.

    Returns
    -------
    A dictionary with keys representing nodes and values representing
    corresponding coloring.

    Examples
    --------
    >>> G = nx.cycle_graph(4)
    >>> d = nx.coloring.equitable_color(G, num_colors=3)
    >>> nx.algorithms.coloring.equitable_coloring.is_equitable(G, d)
    True

    Raises
    ------
    NetworkXAlgorithmError
        If the maximum degree of the graph ``G`` is greater than
        ``num_colors``.

    References
    ----------
    .. [1] Kierstead, H. A., Kostochka, A. V., Mydlarz, M., & Szemer√©di, E.
        (2010). A fast algorithm for equitable coloring. Combinatorica, 30(2),
        217-224.
    """
    ...

