"""
This type stub file was generated by pyright.
"""

"""Provides explicit constructions of expander graphs.

"""
__all__ = ["margulis_gabber_galil_graph", "chordal_cycle_graph", "paley_graph"]
def margulis_gabber_galil_graph(n, create_using=...):
    r"""Returns the Margulis-Gabber-Galil undirected MultiGraph on `n^2` nodes.

    The undirected MultiGraph is regular with degree `8`. Nodes are integer
    pairs. The second-largest eigenvalue of the adjacency matrix of the graph
    is at most `5 \sqrt{2}`, regardless of `n`.

    Parameters
    ----------
    n : int
        Determines the number of nodes in the graph: `n^2`.
    create_using : NetworkX graph constructor, optional (default MultiGraph)
       Graph type to create. If graph instance, then cleared before populated.

    Returns
    -------
    G : graph
        The constructed undirected multigraph.

    Raises
    ------
    NetworkXError
        If the graph is directed or not a multigraph.

    """
    ...

def chordal_cycle_graph(p, create_using=...):
    """Returns the chordal cycle graph on `p` nodes.

    The returned graph is a cycle graph on `p` nodes with chords joining each
    vertex `x` to its inverse modulo `p`. This graph is a (mildly explicit)
    3-regular expander [1]_.

    `p` *must* be a prime number.

    Parameters
    ----------
    p : a prime number

        The number of vertices in the graph. This also indicates where the
        chordal edges in the cycle will be created.

    create_using : NetworkX graph constructor, optional (default=nx.Graph)
       Graph type to create. If graph instance, then cleared before populated.

    Returns
    -------
    G : graph
        The constructed undirected multigraph.

    Raises
    ------
    NetworkXError

        If `create_using` indicates directed or not a multigraph.

    References
    ----------

    .. [1] Theorem 4.4.2 in A. Lubotzky. "Discrete groups, expanding graphs and
           invariant measures", volume 125 of Progress in Mathematics.
           Birkh√§user Verlag, Basel, 1994.

    """
    ...

def paley_graph(p, create_using=...):
    """Returns the Paley (p-1)/2-regular graph on p nodes.

    The returned graph is a graph on Z/pZ with edges between x and y
    if and only if x-y is a nonzero square in Z/pZ.

    If p = 1 mod 4, -1 is a square in Z/pZ and therefore x-y is a square if and
    only if y-x is also a square, i.e the edges in the Paley graph are symmetric.

    If p = 3 mod 4, -1 is not a square in Z/pZ and therefore either x-y or y-x
    is a square in Z/pZ but not both.

    Note that a more general definition of Paley graphs extends this construction
    to graphs over q=p^n vertices, by using the finite field F_q instead of Z/pZ.
    This construction requires to compute squares in general finite fields and is
    not what is implemented here (i.e paley_graph(25) does not return the true
    Paley graph associated with 5^2).

    Parameters
    ----------
    p : int, an odd prime number.

    create_using : NetworkX graph constructor, optional (default=nx.Graph)
       Graph type to create. If graph instance, then cleared before populated.

    Returns
    -------
    G : graph
        The constructed directed graph.

    Raises
    ------
    NetworkXError
        If the graph is a multigraph.

    References
    ----------
    Chapter 13 in B. Bollobas, Random Graphs. Second edition.
    Cambridge Studies in Advanced Mathematics, 73.
    Cambridge University Press, Cambridge (2001).
    """
    ...

