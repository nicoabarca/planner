"""
This type stub file was generated by pyright.
"""

from networkx.utils.decorators import not_implemented_for

"""
Read and write NetworkX graphs as JavaScript InfoVis Toolkit (JIT) format JSON.

See the `JIT documentation`_ for more examples.

Format
------
var json = [
  {
    "id": "aUniqueIdentifier",
    "name": "usually a nodes name",
    "data": {
      "some key": "some value",
      "some other key": "some other value"
     },
    "adjacencies": [
    {
      nodeTo:"aNodeId",
      data: {} //put whatever you want here
    },
    'other adjacencies go here...'
  },

  'other nodes go here...'
];
.. _JIT documentation: http://thejit.org
"""
__all__ = ["jit_graph", "jit_data"]
def jit_graph(data, create_using=...): # -> Graph:
    """Read a graph from JIT JSON.

    Parameters
    ----------
    data : JSON Graph Object

    create_using : Networkx Graph, optional (default: Graph())
        Return graph of this type. The provided instance will be cleared.

    Returns
    -------
    G : NetworkX Graph built from create_using if provided.

    .. deprecated:: 2.6
    """
    ...

@not_implemented_for("multigraph")
def jit_data(G, indent=..., default=...): # -> str:
    """Returns data in JIT JSON format.

    Parameters
    ----------
    G : NetworkX Graph

    indent: optional, default=None
        If indent is a non-negative integer, then JSON array elements and
        object members will be pretty-printed with that indent level.
        An indent level of 0, or negative, will only insert newlines.
        None (the default) selects the most compact representation.

    default: optional, default=None
         It will pass the value to the json.dumps function in order to
         be able to serialize custom objects used as nodes.

    Returns
    -------
    data: JIT JSON string

    .. deprecated:: 2.6
    """
    ...

