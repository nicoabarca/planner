"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping

"""Views of core data structures such as nested Mappings (e.g. dict-of-dicts).
These ``Views`` often restrict element access, with either the entire view or
layers of nested mappings being read-only.
"""
__all__ = ["AtlasView", "AdjacencyView", "MultiAdjacencyView", "UnionAtlas", "UnionAdjacency", "UnionMultiInner", "UnionMultiAdjacency", "FilterAtlas", "FilterAdjacency", "FilterMultiInner", "FilterMultiAdjacency"]
class AtlasView(Mapping):
    """An AtlasView is a Read-only Mapping of Mappings.

    It is a View into a dict-of-dict data structure.
    The inner level of dict is read-write. But the
    outer level is read-only.

    See Also
    ========
    AdjacencyView: View into dict-of-dict-of-dict
    MultiAdjacencyView: View into dict-of-dict-of-dict-of-dict
    """
    __slots__ = ...
    def __getstate__(self): # -> dict[str, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __init__(self, d) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self):
        ...
    
    def __getitem__(self, key):
        ...
    
    def copy(self): # -> dict[Unknown, Unknown]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class AdjacencyView(AtlasView):
    """An AdjacencyView is a Read-only Map of Maps of Maps.

    It is a View into a dict-of-dict-of-dict data structure.
    The inner level of dict is read-write. But the
    outer levels are read-only.

    See Also
    ========
    AtlasView: View into dict-of-dict
    MultiAdjacencyView: View into dict-of-dict-of-dict-of-dict
    """
    __slots__ = ...
    def __getitem__(self, name): # -> AtlasView:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, Unknown]]:
        ...
    


class MultiAdjacencyView(AdjacencyView):
    """An MultiAdjacencyView is a Read-only Map of Maps of Maps of Maps.

    It is a View into a dict-of-dict-of-dict-of-dict data structure.
    The inner level of dict is read-write. But the
    outer levels are read-only.

    See Also
    ========
    AtlasView: View into dict-of-dict
    AdjacencyView: View into dict-of-dict-of-dict
    """
    __slots__ = ...
    def __getitem__(self, name): # -> AdjacencyView:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, dict[Unknown, Unknown]]]:
        ...
    


class UnionAtlas(Mapping):
    """A read-only union of two atlases (dict-of-dict).

    The two dict-of-dicts represent the inner dict of
    an Adjacency:  `G.succ[node]` and `G.pred[node]`.
    The inner level of dict of both hold attribute key:value
    pairs and is read-write. But the outer level is read-only.

    See Also
    ========
    UnionAdjacency: View into dict-of-dict-of-dict
    UnionMultiAdjacency: View into dict-of-dict-of-dict-of-dict
    """
    __slots__ = ...
    def __getstate__(self): # -> dict[str, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __init__(self, succ, pred) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Iterator[Unknown]:
        ...
    
    def __getitem__(self, key):
        ...
    
    def copy(self): # -> dict[Unknown, Unknown]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class UnionAdjacency(Mapping):
    """A read-only union of dict Adjacencies as a Map of Maps of Maps.

    The two input dict-of-dict-of-dicts represent the union of
    `G.succ` and `G.pred`. Return values are UnionAtlas
    The inner level of dict is read-write. But the
    middle and outer levels are read-only.

    succ : a dict-of-dict-of-dict {node: nbrdict}
    pred : a dict-of-dict-of-dict {node: nbrdict}
    The keys for the two dicts should be the same

    See Also
    ========
    UnionAtlas: View into dict-of-dict
    UnionMultiAdjacency: View into dict-of-dict-of-dict-of-dict
    """
    __slots__ = ...
    def __getstate__(self): # -> dict[str, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __init__(self, succ, pred) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self):
        ...
    
    def __getitem__(self, nbr): # -> UnionAtlas:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, Unknown]]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class UnionMultiInner(UnionAtlas):
    """A read-only union of two inner dicts of MultiAdjacencies.

    The two input dict-of-dict-of-dicts represent the union of
    `G.succ[node]` and `G.pred[node]` for MultiDiGraphs.
    Return values are UnionAtlas.
    The inner level of dict is read-write. But the outer levels are read-only.

    See Also
    ========
    UnionAtlas: View into dict-of-dict
    UnionAdjacency:  View into dict-of-dict-of-dict
    UnionMultiAdjacency:  View into dict-of-dict-of-dict-of-dict
    """
    __slots__ = ...
    def __getitem__(self, node): # -> UnionAtlas:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, Unknown]]:
        ...
    


class UnionMultiAdjacency(UnionAdjacency):
    """A read-only union of two dict MultiAdjacencies.

    The two input dict-of-dict-of-dict-of-dicts represent the union of
    `G.succ` and `G.pred` for MultiDiGraphs. Return values are UnionAdjacency.
    The inner level of dict is read-write. But the outer levels are read-only.

    See Also
    ========
    UnionAtlas:  View into dict-of-dict
    UnionMultiInner:  View into dict-of-dict-of-dict
    """
    __slots__ = ...
    def __getitem__(self, node): # -> UnionMultiInner:
        ...
    


class FilterAtlas(Mapping):
    def __init__(self, d, NODE_OK) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def __getitem__(self, key):
        ...
    
    def copy(self): # -> dict[Unknown, Unknown]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class FilterAdjacency(Mapping):
    def __init__(self, d, NODE_OK, EDGE_OK) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def __getitem__(self, node): # -> FilterAtlas:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, Unknown]]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class FilterMultiInner(FilterAdjacency):
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def __getitem__(self, nbr): # -> FilterAtlas:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, Unknown]]:
        ...
    


class FilterMultiAdjacency(FilterAdjacency):
    def __getitem__(self, node): # -> FilterMultiInner:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, dict[Unknown, Unknown]]]:
        ...
    


